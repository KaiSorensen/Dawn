name: File Change Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  update-embeddings:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq is available (compact JSON builder)
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Detect changes and update embeddings (debug curl)
        id: diff-send
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.event.after }}
          REPO:   ${{ github.event.repository.name }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
          MCP_SERVER_URL: ${{ secrets.MCP_SERVER_URL }}
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          # 1. Get commit SHAs for diff
          before_sha="${BEFORE:-$(git rev-parse HEAD~1)}"
          after_sha="${AFTER:-$(git rev-parse HEAD)}"

          # 2. File & dir changes
          added=$(git diff --name-only --diff-filter=A "$before_sha" "$after_sha")
          modified=$(git diff --name-only --diff-filter=M "$before_sha" "$after_sha")
          deleted=$(git diff --name-only --diff-filter=D "$before_sha" "$after_sha")

          moved=""
          while IFS=$'\t' read -r _ old new; do
            [[ -n "$old" && -n "$new" ]] && moved+=$'\n'"$old -> $new"
          done < <(git diff --name-status --diff-filter=R "$before_sha" "$after_sha")

          created_dirs=$(comm -13 <(git ls-tree -r -d --name-only "$before_sha" | sort) <(git ls-tree -r -d --name-only "$after_sha" | sort))
          deleted_dirs=$(comm -23 <(git ls-tree -r -d --name-only "$before_sha" | sort) <(git ls-tree -r -d --name-only "$after_sha" | sort))

          # 3. Convert newline-list to JSON array
          json_array() {
            local list="$1"
            if [[ -z "$list" || "$list" == $'\n' ]]; then
              echo '[]'
            else
              printf '%s\n' "$list" | jq -R -s -c 'split("\n") | map(select(length>0))'
            fi
          }

          created_files_json=$(json_array "$added")
          updated_files_json=$(json_array "$modified")
          deleted_files_json=$(json_array "$deleted")
          moved_files_json=$(json_array "$moved")
          created_dirs_json=$(json_array "$created_dirs")
          deleted_dirs_json=$(json_array "$deleted_dirs")

          # Early exit if nothing changed
          total_changes=$(( $(printf '%s\n' "$added" "$modified" "$deleted" "$moved" "$created_dirs" "$deleted_dirs" | sed '/^$/d' | wc -l) ))
          if [[ "$total_changes" -eq 0 ]]; then
            echo 'No relevant file changes detected. Skipping embedding updates.'
            exit 0
          fi

          # 4. Build payload
          payload=$(jq -n \
            --arg repo "$REPO" \
            --argjson created_files "$created_files_json" \
            --argjson updated_files "$updated_files_json" \
            --argjson deleted_files "$deleted_files_json" \
            --argjson moved_files "$moved_files_json" \
            --argjson created_directories "$created_dirs_json" \
            --argjson deleted_directories "$deleted_dirs_json" \
            '{github_repo_name:$repo,
              created_files:$created_files,
              updated_files:$updated_files,
              deleted_files:$deleted_files,
              moved_files:$moved_files,
              created_directories:$created_directories,
              deleted_directories:$deleted_directories}')

          # Print exact JSON payload to be sent
          echo "-------- PAYLOAD TO BE SENT --------"
          echo "$payload"
          echo "------------------------------------\n"
        
          # 5. Send request to MCP server using environment variables
          if [[ -z "$MCP_SERVER_URL" ]]; then
            echo "Error: MCP_SERVER_URL secret not set"
            exit 1
          fi
          
          if [[ -z "$API_TOKEN" ]]; then
            echo "Error: API_TOKEN secret not set"
            exit 1
          fi

          endpoint="$MCP_SERVER_URL/batch_update_embeddings"
          echo "Endpoint: '$endpoint'"
          echo "About to run: curl -v -X POST '$endpoint' -H 'Content-Type: application/json' -H 'Authorization: Bearer [REDACTED]' -d '$payload'"
          curl -v -X POST "$endpoint" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $API_TOKEN" \
            -d "$payload"
